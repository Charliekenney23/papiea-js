#import stuff

// Initialize Papiea
// Initialize papiea engine
func (papiea papiea) initialize() papiea, err {
    // Load databases
    papiea.statusDb // initialize db connection
    papiea.specDb // initialize db connection
    papiea.providersDb // initialize db connection

    // Sets up the rest api engine
    papiea.api = new rest.api()

    // Start admin facing apis
    papiea.adminFacingApis()

    // Start providers facing apis
    papiea.providerFacingApi()

    // Start user facing apis
    papiea.userFacingApi()
}

// Admin Facing APIs
func (papieaApis papieaApiContext) adminFacingApis() err {
    papieaApis.api.post(papieaApis.prefix+"/providers", func(req, res) procedureSignature{
        registerOrUpgradeProvider(req.providerDescription)
    })
}

// Provider Facing APIS
func (papieaApis papieaApiContext) providerFacingApi() err {
    // Registering Provider Facing APIs
    api = papieaApis.api
    papieaPrefix = papieaApis.prefix

    api.post(papieaPrefix+"/on", func(req, res) {
        // callback url is being generated by the papiea provider library and passed on the request
        papieaApis.registerIntentfulCallback(req.signature, req.callbackUrl)
    })

    api.post(papieaPrefix+"/procedure", func(req, res) {
        // callback url is being generated by the papiea provider library and passed on the request
        papiea_apis.registerProceduralCallback(req.signature, req.callbackUrl)
    })

    // Status update is only exposed to providers. Users can't update status
    api.post(papiea+"/status", func(req, res) {
        res.status(statusDb.updateStatus(req.uuid, req.status) ? 200 : 400)
        return res;
    })
}



// User Facing APIs
func (papiea papiea) userFacingApis() err {
    registeredProviders = papiea.providersDb.listProviders()

    for _, provider := range registeredProviders {
        for _, kind := range provider.kinds{

        }
    }
}
